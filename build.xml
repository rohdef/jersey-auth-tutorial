<project name="test ivy" default="resolve"
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:jacoco="antlib:org.jacoco.ant">
    <property name="web.dir" value="web" />
    <property name="out.dir" value="out" />
    <property name="test.out.dir" value="${out.dir}/test-results" />
    <property name="lib.dir" value="lib" />
    <property name="test.lib.dir" value="lib-test" />
    <property name="build.dir" value="${out.dir}/build" />
    <property name="src.dir" value="src" />
    <property name="test-src.dir" value="test" />
    <property name="test.dir" value="${out.dir}/test" />
    <property name="name" value="jersey-auth" />

    <!-- JaCoCo Coverage analysis -->
    <taskdef uri="antlib:org.jacoco.ant"
             resource="org/jacoco/ant/antlib.xml">
        <classpath path="lib-test/jacocoant.jar"/>
    </taskdef>

    <property name="jacoco.report.dir" value="${test.out.dir}/report" />
    <property name="jacoco.exec" value="${test.out.dir}/jacoco.exec" />

    <target name="init">
        <mkdir dir="${lib.dir}" />
        <mkdir dir="${test.lib.dir}" />
        <mkdir dir="${out.dir}" />
        <mkdir dir="${test.out.dir}" />
        <mkdir dir="${test.out.dir}/report" />
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${test.dir}"/>
    </target>

    <path id="compile.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test.classpath">
        <path refid="compile.classpath" />
        <pathelement location="${build.dir}" />
        <pathelement location="${test.dir}" />
    </path>

    <target name="resolve" description="ivy installation" depends="init">
        <ivy:retrieve/>
    </target>

    <target name="compile" depends="resolve" >
        <javac destdir="${build.dir}" debug="true" srcdir="${src.dir}">
            <classpath refid="compile.classpath"/>
        </javac>
    </target>

    <target name="compile-tests" depends="resolve" >
        <javac destdir="${test.dir}" debug="true" srcdir="${test-src.dir}" includeantruntime="false">
            <classpath refid="compile.classpath"/>
            <classpath><pathelement location="${build.dir}" /></classpath>
        </javac>
    </target>

    <target name="build-war" depends="compile">
        <war destfile="${out.dir}/${name}.war" webxml="${web.dir}/WEB-INF/web.xml">
            <fileset dir="${web.dir}">
                <include name="**/*.*" />
            </fileset>
            <lib dir="${lib.dir}" />
            <classes dir="${build.dir}/" />
        </war>
    </target>

    <target name="test" depends="compile,compile-tests">
        <junit printsummary="yes">
            <classpath refid="test.classpath" />

            <formatter type="xml"/>

            <batchtest fork="yes" todir="${test.out.dir}">
                <fileset dir="${test-src.dir}">
                    <include name="**/*Test*.java" />
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${test.out.dir}/report/">
            <fileset dir="${test.out.dir}" includes="*.xml" />
            <report todir="${test.out.dir}/report/" />
        </junitreport>
    </target>

    <target name="test-coverage" depends="compile,compile-tests"
            description="--> Run JUnit and generate coverage data for all tests">
        <jacoco:coverage destfile="${jacoco.exec}" >
            <junit printsummary="yes" fork="yes" forkmode="once">
                <classpath refid="test.classpath" />

                <formatter type="xml"/>

                <batchtest fork="yes" todir="${test.out.dir}">
                    <fileset dir="${test-src.dir}">
                        <include name="**/*Test*.java" />
                    </fileset>
                </batchtest>
            </junit>
        </jacoco:coverage>
    </target>

    <target name="clean-all">
        <delete dir="${lib.dir}" />
        <delete dir="${out.dir}" />
    </target>

    <target name="clean">
        <delete dir="${lib.dir}" />
        <delete dir="${build.dir}" />
        <delete dir="${test.dir}" />
    </target>
</project>
